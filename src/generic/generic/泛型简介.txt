                                                                                                泛型(generic)简介

Generics(泛型)是程序设计语言的一种技术，指将程序中数据类型进行参数化
它本质上是对程序的数据类型(不包括基本数据类型)进行一次抽象，扩展语言的表达能力，同时支持更大粒度的代码复用。
对于一些数据类型参数化的类和方法来说，它们往往具有更好的可读性、可复用性和可靠性。
在设计集合类和它们的抽象操作时，往往需要将它们定义为与具体数据类型无关。
在这种情况下，使用Generics就是非常适合的。

泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。
使用泛型机制编写的程序代码要比那些杂乱的使用Object变量，然后再进行类型转换的代码具有更好的安全性和可读性。

泛型对于集合类来说尤其有用。
对于一个List来说，如果没有使用泛型，那么可以将任何类型的对象放进去，
然后又可以将这些对象取出来，这样在运行时的强制类型转换(向下转型)就存在着风险。
使用了泛型之后，在编译的时候编译器就知道List的参数类型，就可以判断将某个对象放入List是否合法。
出现编译错误比类在运行时出现类的强制类型转换异常要好得多。

Java泛型的核心概念：告诉编译器想使用什么类型，然后编译器帮你处理一切细节

泛型和Object的区别：
1，泛型可以在编译时刻就能检查类型匹配问题(也就是编译时刻必须指定具体类型)
2，泛型在返回值上可以直接返回精确类型而不用像Object一样进行强制类型转换


注：
1，
对于JVM而言，泛型类只有一个，所以泛型类的静态字段和静态方法的定义中不能使用它所在类的泛型变量 T
T 只能出现在泛型类的非静态字段或非静态方法中，也即 T 是与泛型类的实例相关的信息
静态方法可以使用在其方法本身上定义的泛型变量 T
2，
泛型变量 T 只在编译时被编译器理解，所以不能与运行时被JVM理解并执行的操作符(如 instanceof 和 new )联用