                                 Java 中 的 异 常 机 制
             
1，异常机制概述
             
发现错误的理想时机是在编译阶段，也就是在试图运行程序之前。然而编译期间并不能找到所有的错误，余下的问题必须在运行期间解决。
这就需要错误源能通过某种方式把适当的信息传递给某个接收者，该接收者知道如何正确处理这个问题。

改进的错误恢复机制是提供代码强壮性的最强有力的方式，错误恢复在我们所编写的每一个程序中都是基本的要素。
但是在Java中它显得格外重要，因为Java的主要目标之一就是创建供他人使用的程序构件。要想创建健壮的系统，它的每一个构件都必须是健壮的。
Java使用异常来提供一致的错误报告模型，使得构件能够与客户端代码可靠地沟通问题。

在Java中，如果某个方法不能够采用正常的途径完成它的任务，就可以通过另外一个路径退出方法。
在这种情况下，方法并不返回任何值，而是抛出一个封装了错误信息的对象。需要注意的是，这个方法将会立即退出，并不返回正常情况下的值。
此外，调用这个方法的代码也将无法继续执行，取而代之的是，异常处理机制开始搜索能够处理这种错误条件的异常处理器。

"异常"有"我对此感到意外"的意思，问题出现了，也许不清楚该如何处理，但是的确不应该置之不理。
这时要停下来，看看是不是在别的什么地方能够处理这个问题，如果在当前的环境中还没有足够的信息来解决这个问题，那么就把这个问题提交给一个更高级别的环境中，在那里将作出正确的处理。
使用异常所带来的另一个相当明显的好处是，它往往能够降低错误处理代码的复杂度。如果不使用异常，那么就必须检查特定的错误，并在程序中的许多地方去处理它。
而如果使用异常那就不必在方法调用处进行检查，因为异常机制将保证能捕获这个错误。并且，只需在一个地方处理错误，即所谓的异常处理程序中。

异常情形是指阻止当前方法或作用域继续执行的问题。
把异常情形与普通问题区分开很重要：所谓的普通问题是指，在当前环境下能得到足够的信息，总能处理这个错误。
而对于异常情形，就不能继续下去了，因为在当前环境下无法获得必要的信息来解决问题。所能做的就是从当前环境跳出，并且把问题提交给上一级环境。

当抛出异常后，会有几件事随之发生：
首先，同Java中其它对象的创建一样，将使用new在堆上创建异常对象；
然后，当前的执行路径(它不能继续下去了)被终止，并且从当前环境中抛出异常对象的引用；
此时，异常处理机制接管程序，并开始需找一个恰当的地方来继续运行程序，这个恰当的地方就是"异常处理程序"。
它的任务是将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。

                       
2，Java中的异常代码结构

 
所有的异常都是由Throwable继承而来，但在下一层立即分解为两个分支：Error和Exception。

Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。
如果出现这样的内部错误，除了通知用户，并尽力使程序安全的终止之外，再也无能为力了，这种情况很少出现。
 
try块：异常探测器

如果在方法内部抛出了异常(或者在方法内部调用的其他方法抛出了异常)，这个方法将在抛出异常的过程中结束。
要是不希望方法就此结束，可以在方法内设置一个特殊的块来捕获异常，因为这个块中尝试各种(可能产生异常的)方法调用。

catch块：异常捕获器和处理程序

抛出的异常必须在某处得到处理，这个地点就是异常处理程序，而且针对每个要捕获的异常，得准备相应的处理程序。
异常处理程序紧跟在try块之后用关键字catch表示。当异常被抛出时异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，
然后进入catch子句执行，此时认为异常得到了处理。一旦catch子句结束，则处理程序的查找过程结束。

finally块：清理器

finally块中的语句总会被执行，不管异常是否被处理了，往往用来执行一些清理工作。

一个try块至少要和一个catch块或者finally块匹配

            
3，异常使用建议


1，异常处理不能代替简单的测试

简单的测试：
if(!s.empty) 
s.pop();

使用异常处理：
try{
s.pop();
}catch(EmptyStackException){
}
与执行简单的测试相比，捕获异常所花费的时间大大超过了前者

2，不要过分地细化异常
最好不要将每条语句都分装在一个单独的try语句块中，而是将它们装在一个try语句块中，使用多个catch语句块捕获异常

3，利用异常层次结构
不要只抛出RuntimeException，应该寻找更加适当的子类或创建自己的异常类
不要只捕获Throwable异常，否则会使代码更加难读，更难维护

4，在检测到错误时，"苛刻"要比放任更好
当检测到错误的时候，是返回一个虚拟的数值还是抛出一个异常？
例如当栈为空时，Stack.pop应返回一个null还是抛出一个异常？
一般在出错的地方抛出一个异常要比后面抛出一个空指针异常(比如)更好。

5，不要羞于传递异常
很多人都感觉应该捕获抛出的全部异常，传递异常要比捕获更好，让更高层次的方法通告用户发生了错误，或者放弃不成功的命令更加适宜。

4、5可以归纳为"早抛出，晚捕获"