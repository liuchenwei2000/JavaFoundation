                                                                                          流  简介
                           
I/O类库中常使用"流"这个抽象概念，它代表任何有能力产生数据的数据源对象或者是有能力接收数据的接收端对象，"流"屏蔽了实际的I/O设备中处理数据的细节。
很少使用单一的类来创建流对象，而是通过叠合多个对象来提供所期望的功能。Java中的"流"类库让人迷惑的主要原因就在于：创建单一的结果流却需要创建多个对象。


Java中有两种类型的流：字节流(byte stream)和字符流(character stream):
字节流为处理字节的输入输出提供了方便的方法，例如读取或者书写二进制数据；
字符流为字符的输入和输出处理提供了方便，在最底层，所有的输入输出都是字节形式的。
字符流相关类的后缀都是Stream，字节流相关类的后缀都是Reader/Writer。

Java1.0的I/O类库基类是InputStream和OutputStream，可以读取字节序列的对象被称为输入流(input stream)，可以写入字节序列的对象被称为输出流(output stream)。
InputStream的作用是用来表示那些从不同数据源产生输入的类，这些数据源包括：
1，字节数组(ByteArrayInputStream)
2，String对象(StringBufferInputStream)
3，文件(FileInputStream)
4，管道、由其他种类的流组成的序列、其他数据源如互联网
OutputStream决定了输出所要去往的目标：
1，字节数组(ByteArrayOutputStream)
2，文件(FileOutputStream)

由于以字节为单位流处理存储为Unicode码(Unicode的每个代码单元占用两个字节)的信息很不方便，所以有一个专门的类层次来处理Unicode字符。
Java1.1之后添加了Reader和Writer提供兼容Unicode与面向字符的I/O功能，这些类继承于Reader和Writer。它们的读写操作都是基于双字节的Unicode代码单元，而不是单字节。

几乎所有原始的Java I/O"流"类都有相应的 Reader 和 Writer 类来提供天然的Unicode 操作，然而在某些场合面向字节的 InputStreams 和 OutputStream 才是正确的解决方案。
特别是java.util.zip类库就是面向字节的而不是面向字符的。因此，最明智的做法是尽量尝试使用Reader和 Writer，一旦程序代码无法成功编译就会发现不得不使用面向字节的类库。


使用IO流的注意事项：
当完成了对一个流的读取或者写入后，就应该调用close方法将它关闭，这样就可以释放流所占用的操作系统资源。
关闭一个输出流也可以刷新(flush)输出流占用的缓存区，即临时存储在缓冲区中等待形成较大的数据包后再发送的那些字符，此时将它们发送出去。
如果不关闭文件，最后一个字节包可能永远也不会被发送，当然可以用flush方法手工刷新输出。
