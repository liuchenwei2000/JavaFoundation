                                                                                 类 加 载 机 制
                           
类型信息在程序运行时是如何表示的，这是由Class对象的特殊对象完成的，它包含了与类有关的信息，Class对象就是用来创建类的所有"常规"对象的。
通过这种信息可知道每个对象从属于哪个类，Java利用这个信息决定要执行的方法。

类是程序的一部分，每个类都有一个Class对象，每当编写并且编译一个新类都会产生一个Class对象，被保存在同名的class文件中。
为了生成这个类的对象，运行这个程序的JVM会使用被称为"类加载器"的子系统。
类加载器子系统实际上可以包含一条类加载器链，但是只有一个原生类加载器，它是JVM实现的一部分。

原生类加载器加载的是所谓的可信类，包括JavaAPI类，它们通常是从本地硬盘加载的，所有的类都是在对其第一次使用时，动态加载到JVM中的。
当程序创建第一个对类的静态成员的引用时，就会加载这个类，这可以证明构造器也是类的静态方法，即使在构造器之前并没有使用static关键字。
因此，使用new操作符创建类的新对象也会被当作对类的静态成员的引用。

Java程序在它开始运行之前并非被完全加载，其各个部分是在必需时才加载的，类加载器首先检查这个类的Class对象是否已经加载。
如果未加载，默认的类加载器就会根据类名查找class文件，在这个类的字节码被加载时，它们会接受验证，以确保其没有被破坏，并且不包含不良代码。
这是Java中用于安全防范目的的措施之一，一旦某个类的Class对象被装入内存，就可以创建这个类的对象了。