                                                                构 造 器 中 的 多 态 方 法 的 行 为


如果在一个构造器的内部调用正在构造的对象的某个动态绑定方法
就要用到那个方法的被覆盖后的定义。
然而这个调用的效果可能相当难于预料
因为被覆盖的方法在对象被完全构造之前就会被调用
在任何构造器内部，整个对象可能只是部分形成
只能知道某类对象已经进行初始化
如果构造器只是在构造对象过程中的一个步骤
并且该对象所属的类是这个构造器所属的类的子类
那么子类在当前构造器正在被调用的时刻仍旧是没有被初始化的
然而一个动态绑定的方法调用却会向外深入到继承层次结构内部
它可以调用子类里的方法
如果在构造器内部这样做，那么就会调用某个方法
而这个方法所操纵的成员可能还没有进行初始化

对象初始化的实际过程是：
1，在任何事物发生之前，将分配给对象的存储空间初始化成二进制的零
2，调用对象构造器，如果有基类则先调用基类的构造器
3，按照声明的顺序调用成员的初始化方法
4，调用子类的构造器主体

调用一个构造器创建对象的底层顺序是：
1，加载相关类，符合类加载的顺序
2，初始化相关的成员，符合初始化顺序
3，调用构造器主体

编写构造器的一个准则：
用尽可能简单的方法是对象进入正常状态，尽量避免调用其他方法
在构造器中能够安全调用的方法是基类的final方法(还有private方法，默认是final的)