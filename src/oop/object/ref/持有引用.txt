                                                                                    持 有 引 用


java.lang.ref类库包含了一组类，这些类为垃圾回收提供了更大的灵活性。
当存在可能会耗尽内存的大对象的时候，这些类显得特别有用。
有三个继承自抽象类Reference的类：SoftReference、WeakReference和PhantomReference。
当垃圾回收器正在考察的对象只能通过某个Reference对象才"可获得"时，
上述这些不同的派生类为垃圾回收器提供了不同级别的间接性指示。

对象是"可获得的"(reachable)，是指此对象可在程序中的某处找到。
这意味着在栈中有一个普通的引用，而它正指向此对象；
也可能是某个引用指向某个对象，而那个对象含有另一个引用指向正在讨论的对象；
也可能有更多的中间链接。如果一个对象是"可获得的"，垃圾回收器就不能释放它，因为它仍然为程序所用。
如果一个对象不是"可获得的"，那么程序将无法使用到它，所以将其回收是安全的。

如果想继续持有对某个对象的引用，希望以后还能够访问到该对象，
但是也希望能够允许垃圾回收器释放它，这时就应该使用Referenced对象。
这样就可以继续使用该对象，而在内存消耗殆尽的时候又允许释放该对象。
以Reference对象作为你和普通引用之间的媒介，同时一定不能有普通的引用指向那个对象，
这样就能达到上述目的。(普通的引用指没有经Reference对象包装过的引用。)
如果垃圾回收器发现某个对象通过普通引用是可获得的，该对象就不会被释放。