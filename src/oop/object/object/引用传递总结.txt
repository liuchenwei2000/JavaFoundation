                                                                                                        引用传递总结


Java中所有的参数传递，执行的都是引用传递。
也就是说，当传递"对象"时，真正传递的只是一个引用，指向存活于方法外的"对象"。
所以，对此引用做的任何修改，都是在修改方法外的对象。此外：

1，别名效应在参数传递时自动发生。
2，方法内没有局部对象，只有局部引用。
3，引用有作用域，对象则没有。
4，在Java中，不需要为对象的生命周期操心。
5，没有提供语言级别的支持(例如"常量")以阻止对象被修改，或者消除别名效应的负面影响。
不能简单地使用final关键字来修饰参数，它只能阻止你将当前引用指向其他对象而已。