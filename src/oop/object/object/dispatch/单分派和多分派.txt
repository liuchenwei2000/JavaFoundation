                                                                      单分派和多分派


变量被声明时的类型叫做变量的静态类型(static type)，而变量所引用的对象的真实类型叫做变量的实际类型(actual type)。

根据对象的类型而对方法进行的选择，就是分派(dispatch)。分派是面向对象的语言所提供的关键特性之一。
根据分派发生的时期，可以将分派分为两种，即静态分派和动态分派。

静态分派(static dispatch)发生在编译时期，分派根据静态类型信息发生，方法重载(overload)就是静态分派。
动态分派(dynamic dispatch)发生在运行时期，动态分派动态的置换掉某个方法。面向对象的语言利用动态分派来实现方法置换产生的多态性。

问题的核心是Java编译器在编译时期并不总是知道哪一些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；
而方法的调用则是根据对象的真实类型，而不是静态类型。


分派的类型

一个方法所属的对象叫做方法的接收者，方法的接收者与方法的参量统称做方法的宗量。
根据分派可以基于多少种宗量，可以将面向对象的语言划分为单分派语言和多分派语言。
单分派语言根据一个宗量的类型进行对方法的选择，多分派语言根据多于一个的宗量的类型对方法进行选择。
Java就是动态的单分派语言，因为它的动态分派仅仅会考虑到方法的接收者的类型，同时又是静态的多分派语言，
因为它对重载方法的分派会考虑到方法的接收者的类型以及方法的所有参量的类型。
在Java中，如果一个操作是作用于某个类型不明的对象上面的，那么对这个对象的真实类型测试仅会发生一次，这就是动态的单分派的特征。
综上所述，Java语言支持静态的多分派和动态的单分派。