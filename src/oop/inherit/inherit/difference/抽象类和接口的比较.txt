     abstract 和 interface 的联系与区别
     
任何设计出来的以后将会被继承的重要的类，不管抽象与否，应该是一个接口的实现类。
这样可以使得以后的子类如果还需要继承其他类，这样就可以让子类直接继承其他类，
然后选择实现父类的接口的方式完成多重继承。如果子类认为父类实现的某接口的方法
不适合自己并且还是final的，那么还可以直接实现父接口来达到目的
     
1.
abstract class在Java语言中表示的是一种继承关系
一个类只能使用一次继承关系。但是一个类却可以实现多个interface
2.
在abstract class中可以有自己的数据成员，也可以有非abstract的成员方法
而在interface中，只能够有静态的不能被修改的数据成员
也就是必须是static final的，不过在interface中一般不定义数据成员
所有的成员方法都是abstract的
3.
abstract class和interface所反映出的设计理念不同
其实abstract class表示的是"is-a"关系，interface表示的是"like-a"关系。 
4.
实现抽象类和接口的类必须实现其中的所有方法
抽象类中可以有非抽象方法。接口中则不能有实现方法
5.
接口中定义的变量默认是public static final型，且必须给其初值
所以实现类中不能重新定义，也不能改变其值
6.
抽象类中的变量默认是 friendly 型
其值可以在子类中重新定义，也可以重新赋值 
7.
接口中的方法默认都是public abstract类型的
8.
如果要创建不带任何方法定义和成员变量的基类，优先选择接口而不是抽象类
除非强制必须具有方法定义或者成员变量的时候才改用抽象类


     抽象类                            接口  
可以包含实现区块                  不能包含实现区块 
可以包含非public成员             不可以包含非public成员 
能继承其他的类包含非抽象类         能继承其他接口 
不能被实例化                      不能被实例化 
表示的是"is a"关系               表示的是"like a"关系