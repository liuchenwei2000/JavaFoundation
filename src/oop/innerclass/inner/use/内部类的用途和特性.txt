存在的原因是:
1.
一个内部类的对象能够访问创建它的对象的成员，包括私有数据。
即内部类实例对包含它的那个类的实例来说，是特权的。
2.
对于同一个包中的其他类来说,内部类能够隐藏起来。
内部类不管方法的可见性如何，那怕是public，除了它的外部类，其他类都无法使用它。
3.
匿名内部类可以很方便的定义回调。
4.
使用内部类可以非常方便的编写事件驱动程序。
其实它真正的目的仅仅为了定义回调，进一步就是事件驱动。
内部类一般是为了外部类服务，作为一个Helper的角色，在GUI事件处理将被扩展应用

用途：
可以将一些逻辑相关的类组织到一起，并控制位于内部的类的可访问性
典型情况是外部类有一个方法，该方法返回一个指向内部类的引用
当将内部类向上转型为其基类，尤其是转型为一个接口的时候，内部类十分有用
因为此时内部类-某个接口的实现-对于其他人来说能够完全不可见，并且不可用
所得到的只是指向基类或接口的引用，甚至可能无法找到它的确切类型，方便于隐藏实现细节

private内部类给类的设计者提供了一种途径
通过这种方式可以完全阻止任何依赖于类型的编码，并且完全隐藏实现细节
从客户端程序员的角度看，由于不能访问任何新增加的原本不属于公共借口的方法
所以扩展接口的是没有价值的。

扩展：
可以在一个方法里面或者在任意的作用域内定义内部类，理由：
1，实现了某类型的接口，可以创建并返回对其的引用。
2，想创建一个类来辅助解决一个问题，但是不希望别人可以用它。

使用内部类的其他特性
1，内部类可以有多个实例，每个实例都有自己的状态信息，并且与外部类对象的信息相互独立
2，在单个外部类中，可以让多个内部类以不同的方式实现同一个接口或继承同一个类
3，创建内部类对象的时刻并不依赖于外部类对象的创建
4，内部类没有令人迷惑的"is―a"关系，它就是一个独立的实体
