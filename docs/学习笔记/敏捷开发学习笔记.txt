敏捷开发：是一种面临迅速变化的需求快速开发软件的能力。
面向对象设计的原则
1，单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。
2，开放封闭原则：软件实体(类、模块、函数等)应该是可以扩展的，但是不可修改。
3，Liskov替换原则：子类型必须能够替换掉它们的基类型。
4，依赖倒置原则：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
5，接口隔离原则：不应该强迫客户依赖于他们不用的方法，接口属于客户，不属于他所在的类层次结构。
6，重用发布等价原则：重用的粒度就是发布的粒度。
7，共同封闭原则：包中的所有类对于同一类性质的变化应该是共同封闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。
8，共同重用原则：一个包中的所有类应该是共同重用的。如果重用了包中的一个类，那么就要重用包中的所有类。
9，无循环依赖原则：在报的依赖关系图中不允许存在环。
10，稳定以来原则和稳定抽象原则：朝着稳定的方向进行依赖，包的抽象程度应该和其稳定程度一致。


面向对象软件系统的特性：
1，利用对象进行抽象(抽象：真实世界的对象或概念的模型)
2，封装的类(封装：向外界隐藏对象的所有内部细节的过程)
3，通过消息进行通信
4，类层次结构
5，多态性

关联：是两个类之间的一种关系，表明类的对象之间的相互关系是如何的。
整体/部分：类之间的一种关系，一个类由其他类的对象组成或容纳了其他类的对象。
聚合：一种整体/部分层次关系，一个聚合对象包括(拥有)其它对象，每个被包括的对象被认为是聚合对象的一部分，该对象可以来去自由，不是必需的。
组合：是聚合的一种形式，在这种情况下，没有组成部分，整体就不能存在，也就是对象是整体的不可缺少的部分。
聚合和组合的区别：在聚合中，销毁整体时，部分依然存在；在组合中，当整体销毁时，部分也就同时被销毁。

多态：使得对任何对象自动调用其恰当的方法成为可能。多态现象总是和继承以及从通用超类得到派生类一起发生，它是通过将对象与恰当的方法进行动态绑定来实现的。这意味着子类总是使用其自己方法(覆盖父类的方法)。
动态绑定：在运行时刻才能确定对象实例究竟属于哪个类，从而调用该类的正确方法。

